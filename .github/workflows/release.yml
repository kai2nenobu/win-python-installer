name: Release Python Installer

on:
  pull_request:
    branches: [main]
    types:
    - opened
    - reopened
    - synchronize
    - closed
  workflow_dispatch: # Enable manual trigger
    inputs:
      new_tags:
        description: 'New tag list separated by / (ex: "v3.8.N/v3.7.M")'
        required: true

jobs:
  extract_tags:
    runs-on: ubuntu-20.04
    if: github.event_name == 'workflow_dispatch' || github.head_ref == 'new_release'
    outputs:
      NEW_TAGS: ${{ steps.extract_tags.outputs.NEW_TAGS }}
      BUILD_MATRIX: ${{ steps.extract_tags.outputs.BUILD_MATRIX }}
    steps:
    - name: Extract tags from PR title
      id: extract_tags
      env:
        PR_TITLE: ${{ github.event.pull_request.title }}
      # Êñ∞„Åó„ÅÑ„Çø„Ç∞Áî®„ÅÆ„Éì„É´„Éâ„Éû„Éà„É™„ÉÉ„ÇØ„Çπ„ÇíÊßãÁØâ„Åô„Çã
      run: |
        if [ "${{ github.event_name }}" = 'pull_request' ]; then
          new_tags=$(echo "$PR_TITLE" | sed 's@^.*New release *\(.*\)$@\1@' | tr '/' '\n')
        else  # workflow_dispatch event
          new_tags=$(echo "${{ github.event.inputs.new_tags }}" | tr '/' '\n')
        fi
        new_tags_array=$(echo "$new_tags" | sed -e 's@^@"@' -e 's@$@"@' | paste -s -d, | sed -e 's@^@[@' -e 's@$@]@')
        build_matrix=$(echo "$new_tags" \
          | while read -r tag; do
              if [[ "$tag" =~ ^v3\.6 ]]; then
                printf '{"tag": "%s", "os": "%s"}\n' "$tag" windows-2016
              else
                printf '{"tag": "%s", "os": "%s"}\n' "$tag" windows-2019
              fi
            done \
          | paste -s -d, \
          | sed -e 's@^@[@' -e 's@$@]@'
        )
        echo "::set-output name=NEW_TAGS::$new_tags_array"
        echo "::set-output name=BUILD_MATRIX::$build_matrix"
  build:
    runs-on: ${{ matrix.os }}
    needs: extract_tags
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.extract_tags.outputs.BUILD_MATRIX) }}
    steps:
    - uses: actions/checkout@v2
    - name: Build Installer
      run: |
        powershell -NoProfile -File ./ci/build_installer.ps1 `
          -OutDirectory "${{ github.workspace }}/dist" "${{ matrix.tag }}"
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.tag }}
        path: |
          dist/**/python-*-amd64.exe
  release:
    runs-on: ubuntu-20.04
    # „Éó„É´„É™„ÇØ„Ç®„Çπ„Éà„Åå„Éû„Éº„Ç∏„Åï„Çå„Åü„Å®„Åç„ÅÆ„Åø„É™„É™„Éº„Çπ„Åô„Çã
    if: |
      github.event_name == 'pull_request'
      && github.event.action == 'closed'
      && github.event.pull_request.merged
    needs: [extract_tags, build]
    strategy:
      fail-fast: false
      matrix:
        tag: ${{ fromJSON(needs.extract_tags.outputs.NEW_TAGS) }}
    steps:
    - id: process
      run: |
        tag=${{ matrix.tag }}
        echo "::set-output name=VERSION::${tag#v}"
        echo "::set-output name=VERSION_SLUG::$(echo $tag | grep -o '[0-9]' | tr -d '\n')"
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
    - name: Show downloaded artifacts
      run: ls -AlR ${{ matrix.tag }}
    - name: VirusTotal scan
      id: virustotal
      uses: crazy-max/ghaction-virustotal@v2
      with:
        vt_api_key: ${{ secrets.VT_API_KEY }}
        files: |
          **/python-*-amd64.exe
    - name: Get VirusTotal analysis URL
      id: analysis-url
      run: |
        url=$(echo '${{ steps.virustotal.outputs.analysis }}' | grep -o 'http.*$')
        echo "::set-output name=url::$url"
    - name: Create tag
      run: |
        git tag "${{ matrix.tag }}"
        git push --tags
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ matrix.tag }}
        release_name: Python ${{ steps.process.outputs.VERSION }}
        body: |
          ### üìù Description

          Python ${{ steps.process.outputs.VERSION }} Installer ([Official release page](https://www.python.org/downloads/release/python-${{ steps.process.outputs.VERSION_SLUG }}/))

          ### üõ° [VirusTotal GitHub Action](https://github.com/crazy-max/ghaction-virustotal) analysis

          - [`python-${{ steps.process.outputs.VERSION }}-amd64.exe`](${{ steps.analysis-url.outputs.url }})
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ matrix.tag }}/amd64/python-${{ steps.process.outputs.VERSION }}-amd64.exe
        asset_name: python-${{ steps.process.outputs.VERSION }}-amd64.exe
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
